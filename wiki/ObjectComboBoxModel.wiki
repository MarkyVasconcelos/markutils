#summary How to use - ObjectComboBoxModel
#labels Phase-Implementation

= Introduction =

This class has an issue, this does not work if JComboBox is editable.

But for these ones with only want to show a Collection of objects or enums or whatever you want to show, and still retrieve the selected object in a simply way like the ObjectTableModel do, this can be a good help.

= Details =

This work like ObjectTableModel, is necessary especify the type of the Object we want the model show to it component.

For this example, i'll use the model Person.

{{{
package model;
public class Person {
	private String name;
	private int age;
	public Person(String str, double d) {
		this.name = str;
		this.age = (int) d;
	}
	public String toString() {
		return "Name: " + name + " age: " + age;
	}
}
}}}

Until here, nothing more than usual.

But here is the trick, we want to show infos about the Person in each iten of the JComboBox, we do that writing a Formatter wich will receive an object Person as parameter in the format method and should return a String representing this Person.

My implementation is this one:

{{{
package combobox;
public class PersonFormatter implements Formatter{
	public Object format(Object arg0) {
		Person p = (Person) arg0;
                //In the JComboBox, the first value is always null, to show a blank item we should do this test
		if(p == null)
		   return "";
		return p.toString();
	}
	public String getName() {
		return "person";
	}
	public Object parse(Object arg0) {
		return null;//Never get invoked, JComboBox cannot be editable
	}
}
}}}

And here a sample code that use this model.

{{{
package combobox;
import java.util.*;
import javax.swing.*l;
import mark.utils.awt.ann.*;
import mark.utils.bean.Formatter;
import mark.utils.swing.ObjectComboBoxModel;
import model.Person;
public class ComboBoxExample extends JFrame {
	private ObjectComboBoxModel<Person> model;
	@Action(method="showPerson")
	private JButton button;
	public ComboBoxExample(){
		super("ComboBoxModel");
		model = new ObjectComboBoxModel<Person>();
		model.setFormatter(new PersonFormatter());
		model.add(new Person("A",10.0));//  Like ObjectTableModel,
		model.add(new Person("B",20.0));//the method addAll add all elements of a collection in this model
		model.add(new Person("C",30.0));//and the method setData change the data to the parameter Collection
		model.add(new Person("D",40.0));
		model.add(new Person("E",50.0));
		JComboBox combo = new JComboBox(model);
		JPanel cont = new JPanel();
		cont.add(combo);
		cont.add(button = new JButton("Show"));
		setContentPane(cont);
		pack();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setVisible(true);
		new ActionManager(this);//Necessary to map @Action to the method
	}
	private void showPerson(){
		Person p = model.getSelectedObject();
		System.out.println(p.toString());
	}
	public static void main(String[] args) {
		new ComboBoxExample();
	}
}
}}}

Executing this class, show a window with a JComboBox and a JButton, when pressed it show in the console the value of toString of the person selected in the JComboBox.

In this example are an annotation @Action, of this project too, to understand it, see ActionManager.